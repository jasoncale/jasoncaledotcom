:title: | Helping you git back in version control
:date: Sat May 15 00:51:52 +0100 2010
:meta:
  :some_attribute: value
:content: |

  %h2 Version control is a vital practice.

  %p I don't care about preaching, how you work is up to you; but I've spoken to a lot of friends recently who are scared of version control so I'd like to share a little of how it works for me. Hopefully we'll journey together in a clear, consise (erm, perhaps) and delightful manner.

  %p Let's start with the stuff you already know.

  %p Writing software, website markup or children's books means you are usually editing text. Part of the process requires moving, deleting and replacing content as you go.

  %p Unless you are version managing this content you will have to remember all those changes in your mind if you wish to revert to them. Pretty hard to manage if you are not a savant.

  %p Before facebook people used to write on paper, no one does anymore because they found out it caused cancer. When you wrote large amounts of text you would make revisions towards the final published document. This process usually involved marking changes via highlighting, crossing out and scribbling comments in the margin; the revised documents weren't tossed aside because they allowed authors to make bold changes, whilst retaining older, possibly relevant content which they could refer back to at any time.

  %p So before you claim version control is beyond you, just think of that process; because that is exactly what most version control tools allow you to do.

  %h3 A few words about Git

  %p Git is pretty much the defacto source control management (scm) tool for web programmers these days, and for good reason. It is very fast, flexible and de-centralised which means you can be making offline changes without worrying about painful conflicts when sharing your content updates, or when pulling updates from other people.

  %p Before I used git, I used subversion which is centralised by design. One requirement of this is to be "online" to commit changes to the remote repository, which sucks when you are in a hermatiage or on a plane or whatever. Sure you could create a local repository but that isn't much use when sharing code. There are ways to merge repositories perhaps, but I never figured it out in a way that made any sense.

  %p I'm not going to indulge in why you should use git, to be honest I couldn't care less what you use to version control, I just wholeheartedly think you should be doing it, for everything, all the freaking time. That even means the little side project thingy, which then escalates into taking all your time, forcing you to sell your children. This article you are reading was written and revised using git.

  %h4 Sidenote: When Git is overkill.

  %p Sometimes, and for some things which are stored as binary content (i.e. photoshop documents), version control using Git is a bit pointless. I mean it will work, but it's not really that great. I prefer something like dropbox for that because it will do the revision on document save, which makes a lot of sense, I've not yet come across a reason to commit changes to my photoshop documents in a way that using git makes sense, but perhaps that is might shortsightedness more than git's inability to do so.

  %h3 A stroll through the neighbourhood

  %h4 Creating a repository

  %p Sometime in the history of the content you wish to version control you will have to create a respository, you can do this at any time but it is probably best to do it as early as possible.
  
  %p For our examples we are going to create a webpage about some dimwit who lives in Balham and drinks coffee from a shop called Monmouth whilst writing about using source control.
  
  %p Ok lets create a folder and some basic files and init the git repo-oh-oh-oh.
  
  -irb_session('article_9/getting_started.txt')
  
  %p Ok we are rocking, if you ain't super fly like me and don't dig the terminal well that's ok. What I've done above is create a folder called <code>jasencoffee</code> (and then moved inside it) created 3 files <code>index.htm</code>, <code>style.css</code> and <code>shizzle.js</code> before finally creating our git repository by doing <code>git init .</code> the <code>.</code> means the current directory.
    
  %p What I'm trying to get across are CONCEPTS, you can use a graphical git client if you want, the basic concepts remain, so that is what I'm gonna tell you. 
    
  %h4 Git status - looking at the state of our repository
  
  %p Now we have our bare files and git repo setup it is a good time to introduce you to <code>git status</code> which you can use at any time to show you how your repo is looking.
  
  %p Running <code>git status</code> provides us with a nice output of the current status, and some instructions of what we might like to do. Git is useful like that, check it out:
    
  -irb_session('article_9/status.txt')
  
  %p You can see that it mentions we are on the <strong>master branch</strong>, which we'll ignore for now .. and then it says something about <strong>initial commit</strong>. A commit is basically saying "this is a version of the document I want to keep, make a record of it". 
  
  %p Git knows that we haven't stored anything yet so it offers up some suggestions by showing the untracked files in the working directory, and telling us how we might add them to the repository. Before we do that, lets quickly look at file states.
  
  %h4 The lifecycle of a file between commits
  
  %p When working with git there are 3 main states a file can before it can be committed:
  
  %ol
    %li
      %p <strong>Untracked</strong> means the file exists in the working directory, but you haven't told git to keep an eye on it. This is useful because there are some files you don't want git to track, so when you create a file you must explicitely tell git to track it. Once you do this it will; like a hawk.
    %li
      %p <strong>Modified</strong> means a file git is watching has changed since the last commit (or version) it has of it.
    %li 
      %p <strong>Staged</strong> means you want git to include the current contents of this file in the next commit, this file would previously had been marked as untracked because it was new or modified in the case of an existing file. 
      
  %p It is important to remember that when you create a commit only the files which are <strong>staged</strong> will be included in a commit (we'll look at why this is useful).
  
  %h4 Adding a file to stage
  
  -irb_session('article_9/add_initial_files.txt')
  
  
  
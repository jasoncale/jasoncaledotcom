:title: | The fine art of degradable interface elements
:date: Fri Jan 01 18:03:18 +0000 2010
:meta:
  :week: one
:published: false
:content: |

  %h2 What is the problem?
  
  %p When working on a web application, you will ultimately have to deal with prefrences, settings or controls to allow your users to modify the application behaviour. The simple route is to create a separate page to house these options, with a table or list of form elements representing the user's settings.

  %p However as applications get more complex, and the user interaction becomes more context heavy you may find that separating your preferences outside of the user flow becomes a hiderence to the user experience.

  %p Your users are frustrated, and your client is too, your answer is to place the controls in an accessible place within the user interaction flow.

  %p Perhaps you already have the form working on a separate page, so pulling that html into an overlay isnt too hard. You already have a link to the settings within the page you need to incorperate with, so with a bit of javascript you can modify that link to activate your overlay providing a nice enhancement to the user.

  %p (If the above statement sounds like it really is too hard, send me an email or message me on twitter about it and I'll write something up for that also)

  %p Overlays are fine, but when you have an interface that has multiple setting, or preference modifiers it starts to behave like a jack-in-a-box orgy.

  %p Complex inline interface elements, provide you with an excellent opportunity to allow the user to modify complex settings via a simple interface, and one that shouldn't get in the way of the user flow. An example of this that I'm going to cover is take from an application that I designed and built for a startup called ideapi.

  %p The project is in private beta, so I can't give too much away but a user can author briefs, and to manage how their contacts work interact with the brief we needed a way to allow the brief owner to manage this.

  %p The following video provide a quick overview of solution I came up with:

  %p VIDEO HERE

  %p As you can I have encapsulated a number of fairly complex relationships within a simple interface, which allows the user to quickly update their preferences and get back to what they were doing without breaking flow.

  %p Whilst the interface uses javascript and ajax to enhance the experience, if you take these away you will find an widely accessible form element behind it that will allow the user to make the same modifications no matter what their browsing experience is, which is just the way I like it.

  %p picture of the form element without js

  %p Now you have a bit of background on what we are trying to achive lets dive in and get started. Because this article is inevitably going to get a bit code heavy, I'm going to assume that you know all about html, css and basic jQuery. If you don't, well bare with me as I'm sure you will get something out of reading on.

  %h3 The working example.
  %p For our example application, we need a way of managing our employees. They are rambuncious lot so we shift around the roles quite a lot to keep things interesting. To do this we have created an interface element not unlike the one featured in ideapi.

  %p 
    You can see the finished article
    =succeed('.') do
      %a{:href => "/examples/article_1/example_2.html"}here

  %p Hopefully you want to know how to create this, and as luck has it I'm going to try and show you.

  
  %h4 Building the form.
  %p 
    First comes the markup, the best place to start really, as it will inform what you can and cant do. Here is a selection of the most important bits, you can always view source on the 
    =succeed(',') do
      =link("example", '/examples/article_1/example_1.html', "view example script")
    which you can also access by clicking on 
    =link("download source", '/examples/article_1/example_1.html', "view example script")
    in the code block.

  -code_sample("Creating the widget form", 'article_1/example_1.html', 6..32)

  %p I've also added the basic CSS for the form, which lays out the form as it would look to any poor soul without javascript enabled or available.

  %p Here is a snapshot of the action, with a link for you to peruse the full thing.

  -code_sample("Adding some style", 'article_1/screen.css', 22..45)

  %p Yawnsville is just around the corner, so lets divert our attention to the heart of the matter. The javascript that turns this rather timid little form into a man with it's own little bit of Mick Jagger swagger.

  %p 
    If you are a sadist, you can have a look at the 
    =link("full source here", "/examples/article_1/j/jshizzle.js", "View the javascript")
    but baby steps is the way we like to work, so lets break it down a little and look at a few techniques used in the script, which should make things a little clearer.

  %h3 Wrapping up your code to keep it warm.
  %p Your code is special, so don't just leave it lying round where it could get into trouble. Where possible you should try to encapsulate and there are javascript idioms that allow you to do just that.
  
  %p
    %pre 
      %code (function ($) { ... })(jQuery); // useful for encapsulating a reference to jQuery
  
  %p This is the big one that I use for creating a sealed block of code which has a reference to jQuery into passed into to it when initialised for use throughout the library. 
  
  %p For a simple demonstration of what this does, consider following snippet:
  
  %p
    %pre 
      %code.eval (function (name) { alert("Hello from " + name); })("Jase")
  
  %h4 See for yourself
  %p If you have a browser with a javascript console enabled (for instance firebug or safari with the developer bar enabled) you can copy in the following snippet into the console and it will define a function, and then execute it with whatever you pass into it in the second pair of parenthesis. Alternately you can just click on the snippet above as I've bound it to execute the same script, and hopefully you should see an alert.
  

  %h4 Back to jQuery    
  %p This idiom is used a lot with jQuery as it allow you to pass in a reference to jQuery into your own closures, which also allows you to use the dollar notation throughout your code library, without worrying about conflicts if another library is introduced application that also happens to use the dollar notation (prototype.js for example).
  
  %p
    %pre 
      %code (function ($) { $('.div').show(); })(jQuery);
          

  %h3 Writing utility functions
  
  %p Once you start writing an real length of script, you are going to start repeating yourself. Which is fine whilst you are playing around, but if you have any plans to keep that script around for longer than an afternoon you had better start refactoring.
  
  %p Even in this little example, I've created two utility functions that encapsulate a little of bit of code that I need to execute over and over in the body of the main script.
  
  -code_sample("Create link helper", 'article_1/j/jshizzle.js', 15..32)
  
  %p 
    As you can hopefully see 
    %code createLink()
    is a utility to wrap or append an element
    with a link .. usually to add behaviour to a bit of markup.

  %p It will return a jQuery reference to the newly created element so it can be chained or have events bound to it, like so:

  %p
    %pre 
      %code createLink($('span')).click(function () { $(this).hide() });

  %p 
    Passing in strings to
    %code linkText
    and 
    %code classNames 
    as parameters will place their values into the link html and a boolean to 
    %code append 
    will somewhat expectedly append the link to the element passed into the function instead of wrapping it.

  -code_sample("Sister input", 'article_1/j/jshizzle.js', 34..36)
  
  %p 
    The
    %code getSisterInput()
    function is a little contrived, but these two approaches allow you to create helper methods within your application without polluting the object space, and by creating a reference to 
    %code createLink
    we return a reference to be used in other parts of the application too.
    
  %p As we move onto the widget details, you will see these functions get used, and hopefully you will see their use in context.
    
  
